# This patch file was generated by NetBeans IDE
# It uses platform neutral UTF-8 encoding and \n newlines.
--- /var/www/html/moodle24/grade/export/lib.php
+++ /var/www/html/moodle24/grade/export/lib_1.php
@@ -15,9 +15,10 @@
 // You should have received a copy of the GNU General Public License
 // along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
 
-require_once($CFG->dirroot.'/lib/gradelib.php');
-require_once($CFG->dirroot.'/grade/lib.php');
-require_once($CFG->dirroot.'/grade/export/grade_export_form.php');
+require_once($CFG->dirroot . '/lib/gradelib.php');
+require_once($CFG->dirroot . '/grade/lib.php');
+require_once($CFG->dirroot . '/grade/export/grade_export_form.php');
+require_once($CFG->libdir . '/grade/grade_category.php');
 
 /**
  * Base export class
@@ -25,17 +26,15 @@
 abstract class grade_export {
 
     public $plugin; // plgin name - must be filled in subclasses!
-
     public $grade_items; // list of all course grade items
+    public $gtree; //  course grade tree
     public $groupid;     // groupid, 0 means all groups
     public $course;      // course object
     public $columns;     // array of grade_items selected for export
-
     public $previewrows;     // number of rows in preview
     public $export_letters;  // export letters
     public $export_feedback; // export feedback
     public $userkey;         // export using private user key
-
     public $updatedgradesonly; // only export updated grades
     public $displaytype; // display type (e.g. real, percentages, letter) for exports
     public $decimalpoints; // number of decimal points for exports
@@ -56,36 +55,37 @@
      * @param boolean $usercustomfields include user custom field in export
      * @note Exporting as letters will lead to data loss if that exported set it re-imported.
      */
-    public function grade_export($course, $groupid=0, $itemlist='', $export_feedback=false, $updatedgradesonly = false, $displaytype = GRADE_DISPLAY_TYPE_REAL, $decimalpoints = 2, $onlyactive = false, $usercustomfields = false) {
+
+    public function grade_export($course, $groupid = 0, $itemlist = '', $export_feedback = false, $updatedgradesonly = false, $displaytype = GRADE_DISPLAY_TYPE_REAL, $decimalpoints = 2, $onlyactive = false, $usercustomfields = false) {
         $this->course = $course;
         $this->groupid = $groupid;
-        $this->grade_items = grade_item::fetch_all(array('courseid'=>$this->course->id));
+        $this->grade_items = grade_item::fetch_all(array('courseid' => $this->course->id));
 
         //Populating the columns here is required by /grade/export/(whatever)/export.php
         //however index.php, when the form is submitted, will construct the collection here
         //with an empty $itemlist then reconstruct it in process_form() using $formdata
         $this->columns = array();
         if (!empty($itemlist)) {
-            if ($itemlist=='-1') {
+            if ($itemlist == '-1') {
                 //user deselected all items
             } else {
                 $itemids = explode(',', $itemlist);
                 // remove items that are not requested
                 foreach ($itemids as $itemid) {
                     if (array_key_exists($itemid, $this->grade_items)) {
-                        $this->columns[$itemid] =& $this->grade_items[$itemid];
+                        $this->columns[$itemid] = & $this->grade_items[$itemid];
                     }
                 }
             }
         } else {
-            foreach ($this->grade_items as $itemid=>$unused) {
-                $this->columns[$itemid] =& $this->grade_items[$itemid];
+            foreach ($this->grade_items as $itemid => $unused) {
+                $this->columns[$itemid] = & $this->grade_items[$itemid];
             }
         }
 
         $this->export_feedback = $export_feedback;
-        $this->userkey         = '';
-        $this->previewrows     = false;
+        $this->userkey = '';
+        $this->previewrows = false;
         $this->updatedgradesonly = $updatedgradesonly;
 
         $this->displaytype = $displaytype;
@@ -103,18 +103,18 @@
 
         $this->columns = array();
         if (!empty($formdata->itemids)) {
-            if ($formdata->itemids=='-1') {
+            if ($formdata->itemids == '-1') {
                 //user deselected all items
             } else {
-                foreach ($formdata->itemids as $itemid=>$selected) {
+                foreach ($formdata->itemids as $itemid => $selected) {
                     if ($selected and array_key_exists($itemid, $this->grade_items)) {
-                        $this->columns[$itemid] =& $this->grade_items[$itemid];
+                        $this->columns[$itemid] = & $this->grade_items[$itemid];
                     }
                 }
             }
         } else {
-            foreach ($this->grade_items as $itemid=>$unused) {
-                $this->columns[$itemid] =& $this->grade_items[$itemid];
+            foreach ($this->grade_items as $itemid => $unused) {
+                $this->columns[$itemid] = & $this->grade_items[$itemid];
             }
         }
 
@@ -141,7 +141,6 @@
         if (isset($formdata->previewrows)) {
             $this->previewrows = $formdata->previewrows;
         }
-
     }
 
     /**
@@ -178,15 +177,13 @@
      * @param boolena $feedback feedback colum
      * &return string
      */
-    public function format_column_name($grade_item, $feedback=false) {
-        if ($grade_item->itemtype == 'mod') {
-            $name = get_string('modulename', $grade_item->itemmodule).get_string('labelsep', 'langconfig').$grade_item->get_name();
-        } else {
+    public function format_column_name($grade_item, $feedback = false) {
+
             $name = $grade_item->get_name();
-        }
 
+
         if ($feedback) {
-            $name .= ' ('.get_string('feedback').')';
+            $name .= ' (' . get_string('feedback') . ')';
         }
 
         return strip_tags($name);
@@ -210,8 +207,8 @@
      * Prints preview of exported grades on screen as a feedback mechanism
      * @param bool $require_user_idnumber true means skip users without idnumber
      */
-    public function display_preview($require_user_idnumber=false) {
-        global $OUTPUT,$DB;
+    public function display_preview($require_user_idnumber = false) {
+        global $OUTPUT, $DB;
 
         $userprofilefields = grade_helper::get_user_profile_fields($this->course->id, $this->usercustomfields);
         $formatoptions = new stdClass();
@@ -220,20 +217,100 @@
         echo $OUTPUT->heading(get_string('previewrows', 'grades'));
 
         echo '<table>';
+
+
         echo '<tr>';
         foreach ($userprofilefields as $field) {
+            echo '<th></th>';
+        }
+        $gtree = new grade_tree($this->course->id); //, true, $switch, $this->collapsed, $nooutcomes);
+        $oldcatlevel = 1;
+        $catgories=array();
+        foreach ($this->columns as $grade_item) {
+            $catgories[]=$grade_item->categoryid;
+        }
+        foreach ($gtree->get_levels() as $key => $row) {
+            if ($key == 0) {
+                // do not display course grade category
+                // continue;
+            }
+
+
+
+            foreach ($row as $columnkey => $element) {
+                $type = $element['type'];
+                if (!empty($element['colspan'])) {
+                    $colspan = $element['colspan'];
+                } else {
+                    $colspan = 1;
+                }
+                if (!empty($element['depth'])) {
+                    $catlevel = 'catlevel' . $element['depth'];
+                } else {
+                    $catlevel = '';
+                }
+
+                if ($type == 'category') {
+                    if ($oldcatlevel != $catlevel) {
+                        echo '</tr><tr>';
+                        foreach ($userprofilefields as $field) {
+                            echo '<th></th>';
+                        }
+                    }
+                    $eid=ltrim($element['eid'],"c");
+                    $colspan2=sizeof(array_keys($catgories,$eid));
+                   // echo "ffff"."---".$colspan."size".sizeof(array_keys($catgories,$eid));
+                   // print_r( array_keys($catgories,$eid));
+                    if ($catlevel=='catlevel1') {
+                        echo "<th align='center' colspan=$colspan>" . shorten_text($element['object']->get_name()) . "</th>";
+                    }
+                    if ($found=array_search($eid, $catgories) && $catlevel!='catlevel1' ) {
+                        echo "<th align='center' colspan=$colspan2+1>" . shorten_text($element['object']->get_name()). "</th>";
+                    }
+
+                    $oldcatlevel = $catlevel;
+                    // echo $colspan . shorten_text($element['object']->get_name())."--".$catlevel;
+                }
+            }
+        }
+        echo '</tr>';
+        echo '<tr>';
+
+
+        foreach ($userprofilefields as $field) {
+            echo '<th></th>';
+        }
+//print_r($this->columns);
+        foreach ($this->columns as $grade_item) {
+            // $parent = $DB->get_record('grade_categories', array('id' => $grade_item->categoryid));
+
+            echo '<th>' . number_format(($grade_item->grademax), 2) . '</th>';
+
+            /// add a column_feedback column
+            if ($this->export_feedback) {
+                echo '<th>' . $this->format_column_name($grade_item, true) . '</th>';
+            }
+        }
+        echo '<th>' . "Final Grade" . '</th>';
+        echo '</tr>';
+        echo '<tr>';
+        foreach ($userprofilefields as $field) {
             echo '<th>' . $field->fullname . '</th>';
         }
+
         foreach ($this->columns as $grade_item) {
-            echo '<th>'.$this->format_column_name($grade_item).'</th>';
 
+            echo '<th>' . $this->format_column_name($grade_item) . '</th>';
+
             /// add a column_feedback column
             if ($this->export_feedback) {
-                echo '<th>'.$this->format_column_name($grade_item, true).'</th>';
+                echo '<th>' . $this->format_column_name($grade_item, true) . '</th>';
             }
         }
-	echo '<th>'."Final Grade".'</th>';
+
+        echo '<th>' . "Final Grade" . '</th>';
         echo '</tr>';
+
         /// Print all the lines of data.
         $i = 0;
         $gui = new graded_users_iterator($this->course, $this->columns, $this->groupid);
@@ -253,29 +330,28 @@
 
             $gradeupdated = false; // if no grade is update at all for this user, do not display this row
             $rowstr = '';
-            foreach ($this->columns as $itemid=>$unused) {
+            foreach ($this->columns as $itemid => $unused) {
                 $gradetxt = $this->format_grade($userdata->grades[$itemid]);
 
                 // get the status of this grade, and put it through track to get the status
                 $g = new grade_export_update_buffer();
-                $grade_grade = new grade_grade(array('itemid'=>$itemid, 'userid'=>$user->id));
+                $grade_grade = new grade_grade(array('itemid' => $itemid, 'userid' => $user->id));
                 $status = $g->track($grade_grade);
 
                 if ($this->updatedgradesonly && ($status == 'nochange' || $status == 'unknown')) {
-                    $rowstr .= '<td>'.get_string('unchangedgrade', 'grades').'</td>';
+                    $rowstr .= '<td>' . get_string('unchangedgrade', 'grades') . '</td>';
                 } else {
                     $rowstr .= "<td>$gradetxt</td>";
                     $gradeupdated = true;
-		    $grades=$DB->get_record_sql("Select * from {grade_items} where id=$itemid");
-                    if($grades->itemtype=="course"){
-                        $subjgrade=grade_format_gradevalue_letter($gradetxt, $grades);
-                                $rowstr .= "<td>".$subjgrade."</td>";
+                    $grades = $DB->get_record_sql("Select * from {grade_items} where id=$itemid");
+                    if ($grades->itemtype == "course") {
+                        $subjgrade = grade_format_gradevalue_letter($gradetxt, $grades);
+                        $rowstr .= "<td>" . $subjgrade . "</td>";
                     }
-
                 }
 
                 if ($this->export_feedback) {
-                    $rowstr .=  '<td>'.$this->format_feedback($userdata->feedbacks[$itemid]).'</td>';
+                    $rowstr .= '<td>' . $this->format_feedback($userdata->feedbacks[$itemid]) . '</td>';
                 }
             }
 
@@ -310,16 +386,16 @@
             $itemidsparam = '-1';
         }
 
-        $params = array('id'                =>$this->course->id,
-                        'groupid'           =>$this->groupid,
-                        'itemids'           =>$itemidsparam,
-                        'export_letters'    =>$this->export_letters,
-                        'export_feedback'   =>$this->export_feedback,
-                        'updatedgradesonly' =>$this->updatedgradesonly,
-                        'displaytype'       =>$this->displaytype,
-                        'decimalpoints'     =>$this->decimalpoints,
-                        'export_onlyactive' =>$this->onlyactive,
-                        'usercustomfields'  =>$this->usercustomfields);
+        $params = array('id' => $this->course->id,
+            'groupid' => $this->groupid,
+            'itemids' => $itemidsparam,
+            'export_letters' => $this->export_letters,
+            'export_feedback' => $this->export_feedback,
+            'updatedgradesonly' => $this->updatedgradesonly,
+            'displaytype' => $this->displaytype,
+            'decimalpoints' => $this->decimalpoints,
+            'export_onlyactive' => $this->onlyactive,
+            'usercustomfields' => $this->usercustomfields);
 
         return $params;
     }
@@ -339,22 +415,22 @@
         echo $OUTPUT->container_start('gradeexportlink');
 
         if (!$this->userkey) {      // this button should trigger a download prompt
-            echo $OUTPUT->single_button(new moodle_url('/grade/export/'.$this->plugin.'/export.php', $params), get_string('download', 'admin'));
-
+            echo $OUTPUT->single_button(new moodle_url('/grade/export/' . $this->plugin . '/export.php', $params), get_string('download', 'admin'));
         } else {
             $paramstr = '';
             $sep = '?';
-            foreach($params as $name=>$value) {
-                $paramstr .= $sep.$name.'='.$value;
+            foreach ($params as $name => $value) {
+                $paramstr .= $sep . $name . '=' . $value;
                 $sep = '&';
             }
 
-            $link = $CFG->wwwroot.'/grade/export/'.$this->plugin.'/dump.php'.$paramstr.'&key='.$this->userkey;
+            $link = $CFG->wwwroot . '/grade/export/' . $this->plugin . '/dump.php' . $paramstr . '&key=' . $this->userkey;
 
-            echo get_string('download', 'admin').': ' . html_writer::link($link, $link);
+            echo get_string('download', 'admin') . ': ' . html_writer::link($link, $link);
         }
         echo $OUTPUT->container_end();
     }
+
 }
 
 /**
@@ -362,6 +438,7 @@
  * It does internal buffering to speedup the db operations.
  */
 class grade_export_update_buffer {
+
     public $update_list;
     public $export_time;
 
@@ -401,14 +478,11 @@
                 $status = 'new';
                 $this->update_list[] = $grade_grade->id;
             }
-
         } else if ($grade_grade->exported < $grade_grade->timemodified) {
             $status = 'regrade';
             $this->update_list[] = $grade_grade->id;
-
         } else if ($grade_grade->exported >= $grade_grade->timemodified) {
             $status = 'nochange';
-
         } else {
             // something is wrong?
             $status = 'unknown';
@@ -425,4 +499,6 @@
     public function close() {
         $this->flush(0);
     }
+
 }
+
