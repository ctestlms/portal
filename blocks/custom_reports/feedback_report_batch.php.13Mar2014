<?php

// This file is part of Moodle - http://moodle.org/
//
// Moodle is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// Moodle is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.

/**
 * @package   block-custom_reports
 * @copyright 2012 Hina Yousuf
 * @license   http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
 */
require_once('../../config.php');
require_once("../../mod/feedback/lib.php");
require_once($CFG->libdir . '/blocklib.php');
require_once($CFG->libdir . '/formslib.php');
require_once('./view_attendance_report_form.php');
require('../../mod/attforblock/tcpdf/config/lang/eng.php');
require('../../mod/attforblock/tcpdf/tcpdf.php');
require_once("../../mod/facultyfeedback/lib.php");
require_login($course->id);
$categoryid = optional_param('id', '-1', PARAM_INT);
$export = optional_param('export', false, PARAM_BOOL);
$sort = optional_param('sort', false, PARAM_BOOL);
$sortby = $_POST[sortby];
$perd = $_POST[perod];
$sortorder = $_POST['sortorder'];
$cats = $_POST[catg];
if ($cats) {
    $_SESSION['cats'] = $cats;
}
$cats = $_SESSION['cats'];
$headings = array('Teacher', 'Subject', 'Class', 'Average', 'Rating', 'Total Students', 'Submissions');
if ($categoryid == 2) {
    foreach ($cats as $cat) {
        $context = get_context_instance(CONTEXT_COURSECAT, $cat);
        has_capability('block/custom_reports:getfeedbackreport', $context);
    }
}
foreach ($cats as $cat) {
    $courses1 = get_courses($cat, '', 'c.id, c.fullname, c.startdate,c.credithours, c.idnumber, c.shortname');
    $courses = array_merge((array) $courses1, (array) $courses);
}

$report = get_string('feedback_report', 'block_custom_reports');
$navlinks[] = array('name' => get_string('feedback_report', 'block_custom_reports'), 'link' => null, 'type' => 'activityinstance');
$navigation = build_navigation($navlinks);

if (!$export)
    print_header('Faculty Feedback Report', 'Faculty Feedback Report', $navigation, '', '', true, '', user_login_string($SITE) . $langmenu);

if (($courses && $categoryid == 2) or $export) {
    $mform = new mod_custom_reports_view_attendance_report_form('feedback_report_batch.php', array('courses' => $courses, 'categoryid' => $categoryid, 'report' => $report));
    if ($fromform = $mform->get_data() or $export or $sort) {
        if ($export or $sort) {
            $export_courses = required_param('courses', PARAM_SEQUENCE);
            $courses = $DB->get_records_sql("select id, fullname,credithours ,startdate, idnumber, shortname from {course} where id IN ({$export_courses})");
//            $feedback_no = $_SESSION['feedbacktype'];
            $feedback_no = $_SESSION['feedback_no'];
            $feedbak_no = $_SESSION['feedbak_no'];
        } else {
            $export_courses = "";
            $feedback_no = $fromform->feedbacktype;
            $fb = explode("|", $feedback_no);
            $feedback_no = $fb[0];
            $feedbak_no = $fb[1];
            $_SESSION['feedbacktype'] = $feedback_no;
            $_SESSION['feedback_no'] = $feedback_no;
            $_SESSION['feedbak_no'] = $feedbak_no;

            $_SESSION['feedbacktype'] = $feedback_no;
        }
        $name = $feedback_no;
        $table = new html_table();
        $table->head = array();

        $table->head[] = 'Teacher';
        $table->align[] = 'center';
        $table->size[] = '';

        $table->head[] = 'Subject';
        $table->align[] = 'center';
        $table->size[] = '';

        $table->head[] = 'Class';
        $table->align[] = 'center';
        $table->size[] = '';

        $table->head[] = 'Average';
        $table->align[] = 'center';
        $table->size[] = '';

        $table->head[] = 'Rating';
        $table->align[] = 'center';
        $table->size[] = '';

        if ($feedback_no == "Faculty Course Overview Report") {
            $table->head[] = 'Total Teachers';
            $table->align[] = 'center';
            $table->size[] = '';
        } else {
            $table->head[] = 'Total Students';
            $table->align[] = 'center';
            $table->size[] = '';
        }


        $table->head[] = 'Submissions';
        $table->align[] = 'center';
        $table->size[] = '';



        $i = 1;
        $module = $DB->get_record_sql("SELECT * from {modules}  WHERE name ='feedback'");
        ///start
        if (!$export) {
            foreach ($courses as $course) {

                if ($fromform->{'c' . $course->id} == 'true' and !$export)
                    $courses1 .= $course->id . ",";
            }

            $courses1 = rtrim($courses1, ",");
            $courses1 = ltrim($courses1, "Array");
        }
        if ($export) {
            $courses1 = $export_courses;
        }

        $sql = "SELECT u.id, username,firstname,lastname,idnumber
		FROM mdl_user u
		JOIN mdl_role_assignments ra ON ra.userid = u.id
		JOIN mdl_role r ON ra.roleid = r.id
		JOIN mdl_context c ON ra.contextid = c.id
		WHERE r.name = 'Student'
		AND c.contextlevel =50
		AND c.instanceid
		IN (	
		$courses1
		)
		GROUP BY username";

        $users = $DB->get_records_sql($sql);
        if ($feedback_no == "Faculty Course Overview Report") {
            $module = $DB->get_record_sql("SELECT * from {modules}  WHERE name ='facultyfeedback'");
        } else {
            $module = $DB->get_record_sql("SELECT * from {modules}  WHERE name ='feedback'");
        }
        ////
        $sno = 1;

        //foreach ($users as $user) {
        // $user_courses = "";
        //foreach($courses as $course){
        foreach ($courses as $course) {
            if ((!$export AND $fromform->{'c' . $course->id} == 'true') OR ($export OR $sort)) {
                ///
                /*
                  $context = get_context_instance(CONTEXT_COURSE, $course->id, MUST_EXIST);
                  $sql = " SELECT ra.userid FROM mdl_role_assignments ra WHERE ra.roleid =5 AND ra.userid=$user->id and contextid =$context->id ";

                  if ($student = $DB->get_records_sql($sql)) {
                  $feedbacks = $DB->get_records_sql("SELECT id,name from {feedback} f WHERE course =$course->id and name like'$feedback_no%'");

                  //			if(isset($feedback->id)){
                  foreach ($feedbacks as $feedback) {
                  $userfeedback = $DB->get_record_sql("SELECT * FROM {feedback_completed} where feedback = $feedback->id and userid=$user->id");
                  if (!isset($userfeedback->id)) {

                  if ($user_courses == "") {
                  $user_courses.=$course->fullname . "-<b>(" . $feedback->name . ")</b>";
                  } else {
                  $user_courses.=" , " . $course->fullname . "-<b>(" . $feedback->name . ")</b>";
                  }
                  }
                  }
                  } */

                $coursefullname = $course->fullname; // course name
                $courseid = $course->id; // course id
                $class = $DB->get_record_sql("SELECT name,id from {course_categories} ct WHERE id =(SELECT parent from {course_categories} cat WHERE id =(SELECT category from {course} c where id=$courseid))");
                $string = $class->name;
                $find = "Semester";
                if (strstr($string, $find) == true) {
                    $class = $DB->get_record_sql("SELECT name,id from {course_categories} ct WHERE id =(SELECT parent from {course_categories} cat WHERE id =$class->id)");
                }
                //$feedbacks = $DB->get_records_sql("SELECT id,name from {feedback} f WHERE course =$courseid and (name like'%$feedback_no%'or name like'%$feedbak_no%' )");

                if ($feedback_no == "Faculty Course Overview Report") {
                    $feedbacks = $DB->get_records_sql("SELECT id,name from {facultyfeedback} f WHERE course =$courseid and (name like'%$feedback_no%'or name like'%$feedbak_no%' )");
                } else {
                    $feedbacks = $DB->get_records_sql("SELECT id,name from {feedback} f WHERE course =$courseid and (name like'%$feedback_no%'or name like'%$feedbak_no%' )");
                }
                foreach ($feedbacks as $feedback) {
                    $i++;
                    $coursemodule = $DB->get_record_sql("SELECT * from {course_modules} cm WHERE course =$courseid and instance=$feedback->id and module=$module->id");
                    if ($feedback_no == "Faculty Course Overview Report") {

                        $completedscount = facultyfeedback_get_completeds_group_count($feedback, $mygroupid);
                    } else {
                        $completedscount = feedback_get_completeds_group_count($feedback, $mygroupid);
                    }//$mygroupid = groups_get_activity_group($coursemodule);
                    //$completedscount = feedback_get_completeds_group_count($feedback, $mygroupid);
                    if ($feedback_no == "Faculty Course Overview Report") {
                        $sql = "SELECT u.id
		FROM mdl_user u
		JOIN mdl_role_assignments ra ON ra.userid = u.id
		JOIN mdl_role r ON ra.roleid = r.id
		JOIN mdl_context c ON ra.contextid = c.id
		WHERE r.name = 'Teacher'
		AND c.contextlevel =50
		AND c.instanceid=$courseid
		
		GROUP BY username";
                    } else {
                        $sql = "SELECT u.id
		FROM mdl_user u
		JOIN mdl_role_assignments ra ON ra.userid = u.id
		JOIN mdl_role r ON ra.roleid = r.id
		JOIN mdl_context c ON ra.contextid = c.id
		WHERE r.name = 'Student'
		AND c.contextlevel =50
		AND c.instanceid=$courseid
		
		GROUP BY username";
                    }
                    $users = $DB->get_records_sql($sql);

                    if (!$items = $DB->get_records('feedback_item', array('feedback' => $feedback->id, 'hasvalue' => 1), 'position')) {
                        
                    }
                    $_SESSION['totalavg'] = 0;
                    $_SESSION['questions'] = 0;
                    foreach ($items as $item) {
                        $itemobj = feedback_get_item_class($item->typ);
                        if ($itemobj == new feedback_item_multichoicerated()) {
                            $rowOffset1 = $itemobj->get_average($item, $mygroupid, $coursefilter);
                        }
                    }

                    $faculty = explode("(", $feedback->name);
                    $facultyname = rtrim($faculty[1], ")");
                    if ($facultyname == "") {
                        $facultyname = $facultynames;
                    }
///
                    if ($facultyname == "") {

                        $context = get_context_instance(CONTEXT_COURSE, $courseid, MUST_EXIST);
                        $sql = "SELECT firstname, lastname
                                                                FROM mdl_user u
                                                                JOIN mdl_user_enrolments ue ON ( ue.userid = u.id )
                                                                WHERE u.id
                                                                IN (
                                                                
                                                                SELECT ra.userid
                                                                FROM mdl_role_assignments ra
                                                                WHERE ra.roleid =3
                                                                AND contextid =$context->id)";
                        //echo $course->fullname."-".$sql;
                        $teachers = $DB->get_records_sql($sql);
                        $faculty1 = "";
                        foreach ($teachers as $teacherz) {
                            if ($faculty1 == "") {
                                $faculty1.=$teacherz->firstname . " " . $teacherz->lastname;
                            } else {
                                $faculty1.=" , " . $teacherz->firstname . " " . $teacherz->lastname;
                            }
                        }
                    }
                    $table->data[$i][] = ($facultyname == "") ? $faculty1 : $facultyname;


///
//                    $table->data[$i][] = $facultyname;
                    if ($feedback_no == "Faculty Course Overview Report") {
                        $table->data[$i][] = "<a href='{$CFG->wwwroot}/mod/facultyfeedback/analysis.php?id={$coursemodule->id}&courseid=&do_show=analysis' target='_blank'>" . $coursefullname . "</a>";
                    } else {
                        $table->data[$i][] = "<a href='{$CFG->wwwroot}/mod/feedback/analysis.php?id={$coursemodule->id}&courseid=&do_show=analysis' target='_blank'>" . $coursefullname . "</a>";
                    }
                    $table->data[$i][] = $class->name;
                    $totalmarks = $_SESSION['questions'] * 5;
                    $percentavg = ($_SESSION['totalavg'] / $totalmarks) * 100;
                    $no_of_departments++;
                    $percentavg = number_format(($percentavg), 2);
                    $table->data[$i][] = $percentavg;
                    $department_avg = $percentavg + $department_avg;
                    switch ($percentavg) {
                        case ($percentavg >= 90 && $percentavg <= 100 ):
                            $rating = '<div style="background: green;color:white;">Excellent</div>';
                            break;
                        case ($percentavg >= 75 && $percentavg <= 89.99 ):
                            $rating = '<div style="background: #ADFF2F;">Very Good</div>';
                            break;
                        case ($percentavg >= 60 && $percentavg <= 74.99 ):
                            $rating = '<div style="background: #FF9900;color:white;">Good</div>';
                            break;
                        case ($percentavg >= 40 && $percentavg <= 59.99 ):
                            $rating = '<div style="background: #FF4500;color:white;">Satisfactory</div>';
                            break;
                        case ($percentavg > 0 && $percentavg <= 39.99 ):
                            $rating = '<div style="background: red;color:white;">Poor</div>';
                            break;
                        case ($percentavg == 0 ):
                            $rating = "Feedback not completed";
                            break;
                    }
                    $table->data[$i][] = $rating;
                    $table->data[$i][] = sizeof($users);
                    $table->data[$i][] = ($completedscount != "" ) ? $completedscount : "0";
                }
                ////
            }
        }

        $department_avg = ($department_avg / $no_of_departments);
        $i++;
        $table->data[$i][] = "<b>Average Feedback of Department:</b>";
        $table->data[$i][] = "";
        $table->data[$i][] = "";
        $department_avg = number_format(($department_avg), 2);

        switch ($department_avg) {
            case ($department_avg >= 90 && $department_avg <= 100 ):
                $dept_rating = "Excellent";
                break;
            case ($department_avg >= 75 && $department_avg <= 89.99 ):
                $dept_rating = "Very Good";
                break;
            case ($department_avg >= 60 && $department_avg <= 74.99 ):
                $dept_rating = "Good";
                break;
            case ($department_avg >= 40 && $department_avg <= 59.99 ):
                $dept_rating = "Satisfactory";
                break;
            case ($department_avg > 0 && $department_avg <= 39.99 ):
                $dept_rating = "Poor";
                break;
            case ($department_avg == 0 ):
                $dept_rating = "Feedback not completed";
                break;
        }
        //$department_avg=number_format(($department_avg),2); 
        $table->data[$i][] = "<b>" . $department_avg . "</b>";
        $table->data[$i][] = "<b>" . $dept_rating . "</b>";
        /* if ($user_courses != "") {
          $table->data[$j][] = $sno++;
          $table->data[$j][] = $user->idnumber;
          $table->data[$j][] = $user->firstname . " " . $user->lastname;
          $table->data[$j][] = $user_courses;
          $j++;
          } */
        // }
        /////end
        foreach ($courses as $course) {
            if ((!$export AND $fromform->{'c' . $course->id} == 'true') OR ($export OR $sort)) {
                $startdate = $course->startdate;
                $context = get_context_instance(CONTEXT_COURSE, $course->id);
                $i++;
            }
            if ($fromform->{'c' . $course->id} == 'true' and !$export)
                $export_courses .= $course->id . ",";
        }
        if ($export) {
            $downloadType = $_POST['downloadType'];
            if ($downloadType == "Excel")
                ExportToExcel($table);
            if ($downloadType == "pdf")
                ExportToPDF($table, $name, $type);
        } else {

            echo '<div style="text-align: center; font-weight: bold;">' . $feedback_no . '<br></div>';

            echo '<div style="text-align: left; padding-left: 20px; margin: 5px 0;">';



            echo '<input type="hidden" name="courses" value="' . rtrim($export_courses, ',') . '" />';
            echo '<input type="hidden" name="id" value="' . $categoryid . '" />';

            echo '<form method="post" style="display: inline; margin: 0; padding: 0;">';
            echo '<input type="hidden" name="courses" value="' . rtrim($export_courses, ',') . '" />';
            echo '<input type="hidden" name="id" value="' . $categoryid . '" />';


            echo "<b>Download:</b>";
            echo "<select name='downloadType'>";
            echo '<option value="pdf">Download in pdf Format </option>';
            echo '<option value="Excel">Download in Excel Format </option>';
            echo '</select>';
            echo '<input type="hidden" name="export" value="true" /><input type="submit" value="Download" />';
            echo html_writer::table($table);
            echo '</form></div>';
        }
        exit();
    }else
        $mform->display();
}else {
    $OUTPUT->box_start('generalbox categorybox');
    echo '<form method="post" action="feedback_report_batch.php?id=2" style="display: inline; margin: 0; padding: 0;">';
    print_whole_category_list2(NULL, NULL, NULL, -1, false);
    echo '<input type="submit" value="Select Courses" />';
    echo '</form>';
    $OUTPUT->box_end();
}
echo $OUTPUT->footer();

//================Export to Excel================//
function ExportToExcel($data, $name, $type) {
    global $CFG;
    global $headings;
    global $name, $type;
    global $department;
    //require_once("$CFG->libdir/excellib.class.php");/*
    require_once($CFG->dirroot . '/lib/excellib.class.php');
    $filename = "Faculty_Feedback_Report.xls";

    $workbook = new MoodleExcelWorkbook("-");
/// Sending HTTP headers
    ob_clean();
    $workbook->send($filename);
/// Creating the first worksheet
    $myxls = & $workbook->add_worksheet('Faculty Feedback Report');
/// format types
    $formatbc = & $workbook->add_format();
    $formatbc1 = & $workbook->add_format();
    $formatbc->set_bold(1);
    $myxls->set_column(0, 0, 50);
    $myxls->set_column(1, 7, 20);
    $formatbc->set_align('center');
    $formatbc1->set_align('center');
    $xlsFormats = new stdClass();
    $xlsFormats->default = $workbook->add_format(array(
        'width' => 40));
    //$formatbc->set_size(14);
    $myxls->write(0, 2, "FEEDBACK REPORT", $formatbc);



    foreach ($headings as $heading)
        $myxls->write_string(4, $j++, strtoupper($heading), $formatbc);

    $i = 5;
    $j = 0;
    foreach ($data->data as $row) {
        foreach ($row as $cell) {

            //$myxls->write($i, $j++, $cell);
            if (is_numeric($cell)) {
                $myxls->write_number($i, $j++, strip_tags($cell), $formatbc1);
            } else {
                $myxls->write_string($i, $j++, strip_tags($cell), $formatbc1);
            }
        }
        $i++;
        $j = 0;
    }
    $workbook->close();
    exit;
}

//export to pdf

function ExportToPDF($data, $name, $type) {
    //echo "pdf";
    global $CFG;
    global $headings;
    global $name, $type;
    global $department;
    //$pdf=new PDF();
    //Column titles
    //$header=$data->tabhead;
    // create new PDF document
    $pdf = new TCPDF(PDF_PAGE_ORIENTATION, PDF_UNIT, PDF_PAGE_FORMAT, true, 'UTF-8', false);

    // set document information
    $pdf->SetCreator(PDF_CREATOR);
    $pdf->SetAuthor('');
    $pdf->SetTitle('Feedback Report');
    $pdf->SetSubject('Feedback Report');

    // remove default header/footer
    $pdf->setPrintHeader(false);
    $pdf->setPrintFooter(false);

    // set default monospaced font
    //$pdf->SetDefaultMonospacedFont(PDF_FONT_MONOSPACED);
    //set margins
    //$pdf->SetMargins(PDF_MARGIN_LEFT, PDF_MARGIN_TOP, PDF_MARGIN_RIGHT);
    $pdf->SetMargins(PDF_MARGIN_LEFT, PDF_MARGIN_TOP, PDF_MARGIN_RIGHT);


    //set auto page breaks
    $pdf->SetAutoPageBreak(TRUE, PDF_MARGIN_BOTTOM);

    //set image scale factor
    $pdf->setImageScale(PDF_IMAGE_SCALE_RATIO);

    //set some language-dependent strings
    $pdf->setLanguageArray($l);

    // ---------------------------------------------------------
    // set font
    $pdf->SetFont('helvetica', '', 6);

    // add a page
    $pdf->AddPage('P', 'A4');
    ob_clean();
    // print a line using Cell()
    //$pdf->Cell(0, 10, 'Example 002', 1, 1, 'C');
    $htmcont = ImprovedTable($headings, $data);
    $pdf->writeHTML($htmcont, true, false, false, false, '');
    //echo $htmcont;
    // ---------------------------------------------------------
    //Close and output PDF document
    $pdf->Output("Feedback_Report", 'D');
    exit;
}

//

function ImprovedTable($headings, $data) {
    global $CFG;
    global $headings;
    global $name, $type;
    global $department;
    //echo "improe";
    //Column widths
    //$w=array(40,35,40,45);
    //Header
    $content = $content . '<table cellpadding="2" border="0"><tr><td ><img src="NUST_Logo.jpg" height="52" width="52" /> <font size="15"><b>&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Faculty Feedback Report</b><br/></font></td></tr></table>';


    $content = $content . '<table cellpadding="2" border="1"><tr>';
    /* $content = $content.'<td width="3%">-</td><td width="%10">Lecture Hours/Lab</td><td width="13%">-</td>';
      foreach ($lecture as $l){
      $content = $content.'<td width="18">'.$l.'</td>';
      }
      $content = $content.'<td width="18">-</td><td width="18">-</td><td width="25">-</td></tr><tr>'; */
    for ($i = 0; $i < count($headings); $i++)
    //$this->Cell($w[$i],7,$header[$i],1,0,'C');
        if ($i == 0) {
            $content = $content . '<td width="20%"><b>' . $headings[$i] . '</b></td>';
        } elseif ($i == 1) {
            $content = $content . '<td width="30%"><b>' . $headings[$i] . '</b></td>';
        } elseif ($i == 2) {
            $content = $content . '<td width="10%"><b>' . $headings[$i] . '</b></td>';
        } elseif ($i == 3) {
            $content = $content . '<td width="15%"><b>' . $headings[$i] . '</b></td>';
        } elseif ($i == 4) {
            $content = $content . '<td width="15%"><b>' . $headings[$i] . '</b></td>';
        } elseif ($i == 5) {
            $content = $content . '<td width="8%"><b>' . $headings[$i] . '</b></td>';
        } elseif ($i == 6) {
            $content = $content . '<td width="8%"><b>' . $headings[$i] . '</b></td>';
        }
    //$this->Ln();
    $content = $content . '</tr>';
    //Data
    foreach ($data->data as $row) {
        $content = $content . '<tr>';
        $i = 0;
        foreach ($row as $col) {
            if ($i == 0) {
                $content = $content . '<td width="20%">' . strip_tags($col) . '</td>';
            } elseif ($i == 1) {
                $content = $content . '<td width="30%">' . strip_tags($col) . '</td>';
            } elseif ($i == 2) {
                $content = $content . '<td width="10%">' . strip_tags($col) . '</td>';
            } elseif ($i == 3) {
                $content = $content . '<td width="15%">' . strip_tags($col) . '</td>';
            } elseif ($i == 4) {
                $content = $content . '<td width="15%">' . strip_tags($col) . '</td>';
            } elseif ($i == 5) {
                $content = $content . '<td width="8%">' . strip_tags($col) . '</td>';
            } elseif ($i == 6) {
                $content = $content . '<td width="8%">' . strip_tags($col) . '</td>';
            }
            $i = $i + 1;
        }
        $content = $content . '</tr>';
    }
    $content = $content . '</table>';
    //Closure line
    //$this->Cell(array_sum($w),0,'','T');
    //echo 'Hello';
    return $content;
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////
function print_whole_category_list2($category = NULL, $displaylist = NULL, $parentslist = NULL, $depth = -1, $showcourses = true) {
    global $CFG;

    // maxcategorydepth == 0 meant no limit
    if (!empty($CFG->maxcategorydepth) && $depth >= $CFG->maxcategorydepth) {
        return;
    }

    if (!$displaylist) {
        make_categories_list2($displaylist, $parentslist);
    }

    if ($category) {
        if ($category->visible or has_capability('moodle/category:viewhiddencategories', get_context_instance(CONTEXT_SYSTEM))) {
            print_category_info2($category, $depth, $showcourses);
        } else {
            return;  // Don't bother printing children of invisible categories
        }
    } else {
        $category->id = "0";
    }

    if ($categories = get_child_categories2($category->id)) {   // Print all the children recursively
        $countcats = count($categories);
        $count = 0;
        $first = true;
        $last = false;
        foreach ($categories as $cat) {
            $count++;
            if ($count == $countcats) {
                $last = true;
            }
            $up = $first ? false : true;
            $down = $last ? false : true;
            $first = false;

            print_whole_category_list2($cat, $displaylist, $parentslist, $depth + 1, $showcourses);
        }
    }
}

//////////////////////////////////////////////
function print_category_info2($category, $depth = 0, $showcourses = false) {
    global $CFG, $DB, $OUTPUT;

    $strsummary = get_string('summary');

    $catlinkcss = null;
    if (!$category->visible) {
        $catlinkcss = array('class' => 'dimmed');
    }
    static $coursecount = null;
    if (null === $coursecount) {
        // only need to check this once
        $coursecount = $DB->count_records('course') <= FRONTPAGECOURSELIMIT;
    }

    if ($showcourses and $coursecount) {
        $catimage = '<img src="' . $OUTPUT->pix_url('i/course') . '" alt="" />';
    } else {
        $catimage = "&nbsp;";
    }

    $courses = get_courses($category->id, 'c.sortorder ASC', 'c.id,c.sortorder,c.visible,c.fullname,c.shortname,c.summary');
    if ($showcourses and $coursecount) {
        echo '<div class="categorylist clearfix ' . $depth . '">';
        $cat = '';
        $cat .= html_writer::tag('div', $catimage, array('class' => 'image'));
        $catlink = html_writer::link(new moodle_url('', array('id' => $category->id)), format_string($category->name), $catlinkcss);
        $cat .= html_writer::tag('div', $catlink, array('class' => 'name'));

        $html = '';
        if ($depth > 0) {
            for ($i = 0; $i < $depth; $i++) {
                $html = html_writer::tag('div', $html . $cat, array('class' => 'indentation'));
                $cat = '';
            }
        } else {
            $html = $cat;
        }
        echo html_writer::tag('div', $html, array('class' => 'category'));
        echo html_writer::tag('div', '', array('class' => 'clearfloat'));

        // does the depth exceed maxcategorydepth
        // maxcategorydepth == 0 or unset meant no limit
        $limit = !(isset($CFG->maxcategorydepth) && ($depth >= $CFG->maxcategorydepth - 1));
        if ($courses && ($limit || $CFG->maxcategorydepth == 0)) {
            foreach ($courses as $course) {
                $linkcss = null;
                if (!$course->visible) {
                    $linkcss = array('class' => 'dimmed');
                }

                $courselink = html_writer::link(new moodle_url('/course/view.php', array('id' => $course->id)), format_string($course->fullname), $linkcss);

                // print enrol info
                $courseicon = '';
                if ($icons = enrol_get_course_info_icons($course)) {
                    foreach ($icons as $pix_icon) {
                        $courseicon = $OUTPUT->render($pix_icon) . ' ';
                    }
                }

                $coursecontent = html_writer::tag('div', $courseicon . $courselink, array('class' => 'name'));

                if ($course->summary) {
                    $link = new moodle_url('/course/info.php?id=' . $course->id);
                    $actionlink = $OUTPUT->action_link($link, '<img alt="' . $strsummary . '" src="' . $OUTPUT->pix_url('i/info') . '" />', new popup_action('click', $link, 'courseinfo', array('height' => 400, 'width' => 500)), array('title' => $strsummary));

                    $coursecontent .= html_writer::tag('div', $actionlink, array('class' => 'info'));
                }

                $html = '';
                for ($i = 0; $i <= $depth; $i++) {
                    $html = html_writer::tag('div', $html . $coursecontent, array('class' => 'indentation'));
                    $coursecontent = '';
                }
                echo html_writer::tag('div', $html, array('class' => 'course clearfloat'));
            }
        }
        echo '</div>';
    } else {
        echo '<div class="categorylist level' . $depth . '">';
        $html = '';
        if (count($courses) > 0) {
            $cat = '<input name="catg[]" type="checkbox" value="' . $category->id . '"/>' . $category->name;
            $cat .= html_writer::tag('span', ' (' . count($courses) . ')', array('title' => get_string('numberofcourses'), 'class' => 'numberofcourse'));
        } else {
            $cat = $category->name; //html_writer::link(new moodle_url('', array('id'=>$category->id)), format_string($category->name), $catlinkcss);
            $cat .= html_writer::tag('span', ' (' . count($courses) . ')', array('title' => get_string('numberofcourses'), 'class' => 'numberofcourse'));
        }
        if ($depth > 0) {
            for ($i = 0; $i < $depth; $i++) {
                //$html = html_writer::tag('div', $html .$cat, array('class'=>'indentation'));
                $html = html_writer::tag('div', $html . $cat, array('class' => 'indentation level' . $i));
                $cat = '';
            }
        } else {
            $html = $cat;
        }

        echo html_writer::tag('div', $html, array('class' => 'category'));
        echo html_writer::tag('div', '', array('class' => 'clearfloat', 'style' => 'clear: both;'));
        echo '</div>';
    }
}

function make_categories_list2(&$list, &$parents, $requiredcapability = '', $excludeid = 0, $category = NULL, $path = "") {

    // initialize the arrays if needed
    if (!is_array($list)) {
        $list = array();
    }
    if (!is_array($parents)) {
        $parents = array();
    }

    if (empty($category)) {
        // Start at the top level.
        $category = new stdClass;
        $category->id = 0;
    } else {

        // This is the excluded category, don't include it.
        if ($excludeid > 0 && $excludeid == $category->id) {

            return;
        }

        // Update $path.
        if ($path) {

            $path = $path . ' / ' . format_string($category->name);
        } else {

            $path = format_string($category->name);
        }

        // Add this category to $list, if the permissions check out.
        if (empty($requiredcapability)) {
            $list[$category->id] = $path;
        } else {
            ensure_context_subobj_present($category, CONTEXT_COURSECAT);
            $requiredcapability = (array) $requiredcapability;

            if (has_all_capabilities($requiredcapability, $category->context)) {

                $list[$category->id] = $path;
            }
        }
    }

    // Add all the children recursively, while updating the parents array.
    if ($categories = get_child_categories2($category->id)) {

        foreach ($categories as $cat) {
            if (!empty($category->id)) {
                if (isset($parents[$category->id])) {
                    $parents[$cat->id] = $parents[$category->id];
                }
                $parents[$cat->id][] = $category->id;
            }
            make_categories_list2($list, $parents, $requiredcapability, $excludeid, $cat, $path);
        }
    }
}

///////////////
function get_child_categories2($parentid) {

    static $allcategories = null;

    // only fill in this variable the first time
    if (null == $allcategories) {
        $allcategories = array();

        $categories = get_categories();

        foreach ($categories as $category) {
            if (empty($allcategories[$category->parent])) {

                $allcategories[$category->parent] = array();
            }

            $allcategories[$category->parent][] = $category;
        }
    }

    if (empty($allcategories[$parentid])) {

        return array();
    } else {

        return $allcategories[$parentid];
    }
}

?>
