// This class was generated by the JAXRPC SI, do not edit.
// Contents subject to change without notice.
// JAX-RPC Standard Implementation (1.1.3, build R1)
// Generated source version: 1.1.3

package jplagTutorial.jplagClient;

import com.sun.xml.rpc.client.BasicService;
import com.sun.xml.rpc.encoding.*;
import com.sun.xml.rpc.encoding.simpletype.*;
import com.sun.xml.rpc.encoding.soap.*;
import com.sun.xml.rpc.encoding.literal.*;
import com.sun.xml.rpc.soap.SOAPVersion;
import com.sun.xml.rpc.wsdl.document.schema.SchemaConstants;
import javax.xml.rpc.*;
import javax.xml.rpc.encoding.*;
import javax.xml.namespace.QName;

public class JPlagService_SerializerRegistry implements SerializerConstants {
    public JPlagService_SerializerRegistry() {
    }
    
    public TypeMappingRegistry getRegistry() {
        
        TypeMappingRegistry registry = BasicService.createStandardTypeMappingRegistry();
        TypeMapping mapping12 = registry.getTypeMapping(SOAP12Constants.NS_SOAP_ENCODING);
        TypeMapping mapping = registry.getTypeMapping(SOAPConstants.NS_SOAP_ENCODING);
        TypeMapping mapping2 = registry.getTypeMapping("");
        {
            QName type = new QName("http://jplag.ipd.kit.edu/JPlagService/types", "startResultDownloadData");
            CombinedSerializer serializer = new jplagTutorial.jplagClient.StartResultDownloadData_LiteralSerializer(type, "", DONT_ENCODE_TYPE);
            registerSerializer(mapping2,jplagTutorial.jplagClient.StartResultDownloadData.class, type, serializer);
        }
        {
            QName type = new QName("http://jplag.ipd.kit.edu/JPlagService/types", "RequestDataArray");
            CombinedSerializer serializer = new jplagTutorial.jplagClient.RequestDataArray_LiteralSerializer(type, "", DONT_ENCODE_TYPE);
            registerSerializer(mapping2,jplagTutorial.jplagClient.RequestDataArray.class, type, serializer);
        }
        {
            QName type = new QName("http://jplag.ipd.kit.edu/JPlagService/types", "RequestData");
            CombinedSerializer serializer = new jplagTutorial.jplagClient.RequestData_LiteralSerializer(type, "", DONT_ENCODE_TYPE);
            registerSerializer(mapping2,jplagTutorial.jplagClient.RequestData.class, type, serializer);
        }
        {
            QName type = new QName("http://jplag.ipd.kit.edu/JPlagService/types", "setMailTemplateParams");
            CombinedSerializer serializer = new jplagTutorial.jplagClient.SetMailTemplateParams_LiteralSerializer(type, "", DONT_ENCODE_TYPE);
            registerSerializer(mapping2,jplagTutorial.jplagClient.SetMailTemplateParams.class, type, serializer);
        }
        {
            QName type = new QName("http://jplag.ipd.kit.edu/JPlagService/types", "ServerInfo");
            CombinedSerializer serializer = new jplagTutorial.jplagClient.ServerInfo_LiteralSerializer(type, "", DONT_ENCODE_TYPE);
            registerSerializer(mapping2,jplagTutorial.jplagClient.ServerInfo.class, type, serializer);
        }
        {
            QName type = new QName("http://jplag.ipd.kit.edu/JPlagService/types", "Status");
            CombinedSerializer serializer = new jplagTutorial.jplagClient.Status_LiteralSerializer(type, "", DONT_ENCODE_TYPE);
            registerSerializer(mapping2,jplagTutorial.jplagClient.Status.class, type, serializer);
        }
        {
            QName type = new QName("http://jplag.ipd.kit.edu/JPlagService/types", "notifyDevelopersParams");
            CombinedSerializer serializer = new jplagTutorial.jplagClient.NotifyDevelopersParams_LiteralSerializer(type, "", DONT_ENCODE_TYPE);
            registerSerializer(mapping2,jplagTutorial.jplagClient.NotifyDevelopersParams.class, type, serializer);
        }
        {
            QName type = new QName("http://jplag.ipd.kit.edu/JPlagService/types", "setDeveloperStateParams");
            CombinedSerializer serializer = new jplagTutorial.jplagClient.SetDeveloperStateParams_LiteralSerializer(type, "", DONT_ENCODE_TYPE);
            registerSerializer(mapping2,jplagTutorial.jplagClient.SetDeveloperStateParams.class, type, serializer);
        }
        {
            QName type = new QName("http://jplag.ipd.kit.edu/JPlagService/types", "setUserDataParams");
            CombinedSerializer serializer = new jplagTutorial.jplagClient.SetUserDataParams_LiteralSerializer(type, "", DONT_ENCODE_TYPE);
            registerSerializer(mapping2,jplagTutorial.jplagClient.SetUserDataParams.class, type, serializer);
        }
        {
            QName type = new QName("http://jplag.ipd.kit.edu/JPlagService/types", "UserDataArray");
            CombinedSerializer serializer = new jplagTutorial.jplagClient.UserDataArray_LiteralSerializer(type, "", DONT_ENCODE_TYPE);
            registerSerializer(mapping2,jplagTutorial.jplagClient.UserDataArray.class, type, serializer);
        }
        {
            QName type = new QName("http://jplag.ipd.kit.edu/JPlagService/types", "MailTemplate");
            CombinedSerializer serializer = new jplagTutorial.jplagClient.MailTemplate_LiteralSerializer(type, "", DONT_ENCODE_TYPE);
            registerSerializer(mapping2,jplagTutorial.jplagClient.MailTemplate.class, type, serializer);
        }
        {
            QName type = new QName("http://jplag.ipd.kit.edu/JPlagService/types", "UserData");
            CombinedSerializer serializer = new jplagTutorial.jplagClient.UserData_LiteralSerializer(type, "", DONT_ENCODE_TYPE);
            registerSerializer(mapping2,jplagTutorial.jplagClient.UserData.class, type, serializer);
        }
        {
            QName type = new QName("http://jplag.ipd.kit.edu/JPlagService/types", "Option");
            CombinedSerializer serializer = new jplagTutorial.jplagClient.Option_LiteralSerializer(type, "", DONT_ENCODE_TYPE);
            registerSerializer(mapping2,jplagTutorial.jplagClient.Option.class, type, serializer);
        }
        {
            QName type = new QName("http://jplag.ipd.kit.edu/JPlagService/types", "LanguageInfo");
            CombinedSerializer serializer = new jplagTutorial.jplagClient.LanguageInfo_LiteralSerializer(type, "", DONT_ENCODE_TYPE);
            registerSerializer(mapping2,jplagTutorial.jplagClient.LanguageInfo.class, type, serializer);
        }
        {
            QName type = new QName("http://jplag.ipd.kit.edu/JPlagService/types", "MailTemplateArray");
            CombinedSerializer serializer = new jplagTutorial.jplagClient.MailTemplateArray_LiteralSerializer(type, "", DONT_ENCODE_TYPE);
            registerSerializer(mapping2,jplagTutorial.jplagClient.MailTemplateArray.class, type, serializer);
        }
        {
            QName type = new QName("http://jplag.ipd.kit.edu/JPlagService/types", "JPlagException");
            CombinedSerializer serializer = new jplagTutorial.jplagClient.JPlagException_LiteralSerializer(type, "", DONT_ENCODE_TYPE);
            registerSerializer(mapping2,jplagTutorial.jplagClient.JPlagException.class, type, serializer);
        }
        {
            QName type = new QName("http://jplag.ipd.kit.edu/JPlagService/types", "startSubmissionUploadParams");
            CombinedSerializer serializer = new jplagTutorial.jplagClient.StartSubmissionUploadParams_LiteralSerializer(type, "", DONT_ENCODE_TYPE);
            registerSerializer(mapping2,jplagTutorial.jplagClient.StartSubmissionUploadParams.class, type, serializer);
        }
        {
            QName type = new QName("http://jplag.ipd.kit.edu/JPlagService/types", "UserInfo");
            CombinedSerializer serializer = new jplagTutorial.jplagClient.UserInfo_LiteralSerializer(type, "", DONT_ENCODE_TYPE);
            registerSerializer(mapping2,jplagTutorial.jplagClient.UserInfo.class, type, serializer);
        }
        {
            QName type = new QName("http://jplag.ipd.kit.edu/JPlagService/types", "Submission");
            CombinedSerializer serializer = new jplagTutorial.jplagClient.Submission_LiteralSerializer(type, "", DONT_ENCODE_TYPE);
            registerSerializer(mapping2,jplagTutorial.jplagClient.Submission.class, type, serializer);
        }
        {
            CombinedSerializer serializer = new LiteralSimpleTypeSerializer(SchemaConstants.QNAME_TYPE_BASE64_BINARY,
                "", XSDBase64BinaryEncoder.getInstance());
            registerSerializer(mapping2,byte[].class, SchemaConstants.QNAME_TYPE_BASE64_BINARY, serializer);
        }
        {
            QName type = new QName("http://jplag.ipd.kit.edu/JPlagService/types", "updateUserInfoParams");
            CombinedSerializer serializer = new jplagTutorial.jplagClient.UpdateUserInfoParams_LiteralSerializer(type, "", DONT_ENCODE_TYPE);
            registerSerializer(mapping2,jplagTutorial.jplagClient.UpdateUserInfoParams.class, type, serializer);
        }
        {
            QName type = new QName("http://jplag.ipd.kit.edu/JPlagService/types", "FinishRequestData");
            CombinedSerializer serializer = new jplagTutorial.jplagClient.FinishRequestData_LiteralSerializer(type, "", DONT_ENCODE_TYPE);
            registerSerializer(mapping2,jplagTutorial.jplagClient.FinishRequestData.class, type, serializer);
        }
        return registry;
    }
    
    private static void registerSerializer(TypeMapping mapping, java.lang.Class javaType, javax.xml.namespace.QName xmlType,
        Serializer ser) {
        mapping.register(javaType, xmlType, new SingletonSerializerFactory(ser),
            new SingletonDeserializerFactory((Deserializer)ser));
    }
    
}
