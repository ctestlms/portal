<?php
// This file is part of Moodle - http://moodle.org/
//
// Moodle is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// Moodle is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.

/**
 * Self enrol plugin implementation.
 *
 * @package    enrol_self
 * @copyright  2010 Petr Skoda  {@link http://skodak.org}
 * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
 */

defined('MOODLE_INTERNAL') || die();

require_once("$CFG->libdir/formslib.php");

class enrol_self_enrol_form extends moodleform {
    protected $instance;
    protected $toomany = false;
    protected $another = false;
    protected $conflict = false;
    protected $conflict_electives = false;

    /**
     * Overriding this function to get unique form id for multiple self enrolments.
     *
     * @return string form identifier
     */
    protected function get_form_identifier() {
        $formid = $this->_customdata->id.'_'.get_class($this);
        return $formid;
    }

    public function definition() {
        global $DB,$USER;

        $mform = $this->_form;
        $instance = $this->_customdata;
        $this->instance = $instance;
        $plugin = enrol_get_plugin('self');

        $heading = $plugin->get_instance_name($instance);
        $mform->addElement('header', 'selfheader', $heading);
		//------CHECK FOR MAXIMUM CAP COURSE ------------
        if ($instance->customint3 > 0) {
            // Max enrol limit specified.
            $count = $DB->count_records('user_enrolments', array('enrolid'=>$instance->id));
            if ($count >= $instance->customint3) {
                // Bad luck, no more self enrolments here.
                $this->toomany = true;
                $mform->addElement('static', 'notice', '', get_string('maxenrolledreached', 'enrol_self'));
                return;
            }
        }
		$course = $DB->get_record('course', array('id'=>$instance->courseid), '*', MUST_EXIST);
		$category = $course->category;
		$semester = $DB->get_record_sql("select parent,name,path from {course_categories} where id=$category");
		$path = explode("/", $semester->path);
		$school = $DB->get_record_sql("select id,name from {course_categories} where id=$path[1]");
		
		if ($school->name == "School of Electrical Engineering and Computer Science (SEECS)" )
		{
			//echo "School: $school->name -- Course Name: $course->fullname<br/>";
			 //------------------- CHECK FOR MORE THAN ONE ELECTIVES / UNABLE TO ENROL IN MULTIPLE SECTIONS OF SAME COURSE  
		   $course = $DB->get_record('course', array('id'=>$instance->courseid), '*', MUST_EXIST);
		  
			$coursename = explode("(",$course->fullname); 
			$course_name = $coursename['0'];
			$sql1= "SELECT c.id AS courseid, 
			SUBSTRING_INDEX(c.fullname, '(', 1) AS fullname,
			u.username
			FROM 
			mdl_role_assignments ra 
			JOIN mdl_user u ON u.id = ra.userid
			JOIN mdl_role r ON r.id = ra.roleid
			JOIN mdl_context cxt ON cxt.id = ra.contextid
			JOIN mdl_course c ON c.id = cxt.instanceid

			WHERE ra.userid = '".$USER->id."'
			AND ra.contextid = cxt.id
			AND cxt.contextlevel =50
			AND cxt.instanceid = c.id 
			AND  roleid = 5 
			AND c.startdate > ".time()."
		   AND SUBSTRING_INDEX(c.fullname, '(', 1) = '".$course_name."'";
		   
				 
			 $result=$DB->record_exists_sql($sql1) ;
			 
			 if($result==1)
			 {
			 $this->another = true;
			
			 $mform->addElement('static', 'notice', '', get_string('enroledinanothersection', 'enrol_self'));
					return;
			 }
			 
	 
			 //------------------- CHECK FOR ELECTIVES SCHEDULE CLASH -----------------
			$findme = "Elective";
			$pos = strpos($course->fullname, $findme);
			 if($pos == true){
			 $sql4= "SELECT c.id ,c.fullname,c.shortname
			FROM 
			mdl_role_assignments ra 
			JOIN mdl_user u ON u.id = ra.userid
			JOIN mdl_role r ON r.id = ra.roleid
			JOIN mdl_context cxt ON cxt.id = ra.contextid
			JOIN mdl_course c ON c.id = cxt.instanceid

			WHERE ra.userid = '".$USER->id."'
				
			AND ra.contextid = cxt.id
			AND cxt.contextlevel =50
			AND cxt.instanceid = c.id 
			AND  roleid = 5
		   AND c.fullname LIKE '%Elective%'
		   AND c.startdate > ".time();
			 
	   
			$result3=$DB->get_records_sql($sql4);
			
			$count = count($result3);
			
			if($count == 2){
			   $this->conflict_electives = true;
			   $mform->addElement('static', 'notice', '', get_string('enroledinanotherelective1', 'enrol_self'));
					return;
		   }
		   }
	  
		   //1408717068
	   //--------------CHECK FOR CLASH COURSES-----------------
			$sql3= "SELECT c.id AS courseid, u.user_subgroup as subgroup,
			SUBSTRING_INDEX(c.fullname, '(', 1) AS fullname,c.shortname
			FROM 
			mdl_role_assignments ra 
			JOIN mdl_user u ON u.id = ra.userid
			JOIN mdl_role r ON r.id = ra.roleid
			JOIN mdl_context cxt ON cxt.id = ra.contextid
			JOIN mdl_course c ON c.id = cxt.instanceid
			WHERE ra.userid = '".$USER->id."'
			AND ra.contextid = cxt.id
			AND cxt.contextlevel =50
			AND cxt.instanceid = c.id 
			AND  roleid = 5
			AND c.startdate > ".time();

		  
			$result2=$DB->get_records_sql($sql3);
			$courses = array();
			foreach($result2 as $r)
			{
			   $courses[] = $r->shortname; 
			}
				   $courselist = implode(",",$courses);
				   $courseslist = urlencode($courselist);
				   
				   $courseslist1 = str_replace("+","%20",$courseslist);
				   
			  //     $e1 = str_replace("+","%20",$courseslist);
				$courseslist2 = str_replace("%2C","%26",$courseslist1);
				$course_shortname=urlencode($course->shortname);
				$course_shortname1 = str_replace("+","%20",$course_shortname);

			if($DB->record_exists_sql($sql3)){
				$conflict  =   file_get_contents("http://lms.nust.edu.pk/course_manager/index.php/schedules/checkClash/$courseslist2/$course_shortname1");

				$conarray = json_decode($conflict);
				
				//echo "No clash var: $conarray->no_clash Clash with: $conarray->clash_with on $conarray->clash_day at $conarray->clash_time<br/>";
				
				if($conarray->no_clash == 0) {
					//if ($course->fullname)
					
					//echo "Conflict here <br/>";
					if($conarray->clash_with != "")
					{
						$this->conflict = true;
						echo "No clash var: $conarray->no_clash Clash with: $conarray->clash_with on $conarray->clash_day at $conarray->clash_time<br/>";
						$mform->addElement('static', 'notice', '', get_string('schedule_clash1', 'enrol_self',$conarray));
						return;
			   }
			 
			}
		}
		}
		else if ($school->name == "NUST Business School (NBS)") {
			// do nothing
		//	echo "School: $school->name -- Course Name: $course->fullname<br/>";
			 //------------------- CHECK FOR MORE THAN ONE ELECTIVES / UNABLE TO ENROL IN MULTIPLE SECTIONS OF SAME COURSE  
		   $course = $DB->get_record('course', array('id'=>$instance->courseid), '*', MUST_EXIST);
		  
			$coursename = explode("(",$course->fullname); 
			$course_name = $coursename['0'];
			$sql1= "SELECT c.id AS courseid, 
			SUBSTRING_INDEX(c.fullname, '(', 1) AS fullname,
			u.username
			FROM 
			mdl_role_assignments ra 
			JOIN mdl_user u ON u.id = ra.userid
			JOIN mdl_role r ON r.id = ra.roleid
			JOIN mdl_context cxt ON cxt.id = ra.contextid
			JOIN mdl_course c ON c.id = cxt.instanceid

			WHERE ra.userid = '".$USER->id."'
			AND ra.contextid = cxt.id
			AND cxt.contextlevel =50
			AND cxt.instanceid = c.id 
			AND  roleid = 5 
			AND c.startdate > ".time()."
		   AND SUBSTRING_INDEX(c.fullname, '(', 1) = '".$course_name."'";
		   
				 
			 $result=$DB->record_exists_sql($sql1) ;
			 
			 if($result==1)
			 {
				 $this->another = true;
				 $mform->addElement('static', 'notice', '', get_string('enroledinanothersection', 'enrol_self'));
				return;
			 }
			 
	 
			 //------------------- CHECK FOR ELECTIVES SCHEDULE CLASH -----------------
			$findme = "FYP";
			$pos = strpos($course->fullname, $findme);
			 if($pos == true){
			 $sql4= "SELECT c.id ,c.fullname,c.shortname
			FROM 
			mdl_role_assignments ra 
			JOIN mdl_user u ON u.id = ra.userid
			JOIN mdl_role r ON r.id = ra.roleid
			JOIN mdl_context cxt ON cxt.id = ra.contextid
			JOIN mdl_course c ON c.id = cxt.instanceid

			WHERE ra.userid = '".$USER->id."'
				
			AND ra.contextid = cxt.id
			AND cxt.contextlevel =50
			AND cxt.instanceid = c.id 
			AND  roleid = 5
		   AND c.fullname LIKE '%Elective%'
		   AND c.startdate > ".time();
			 
	   
			$result3=$DB->get_records_sql($sql4);
			
			$count = count($result3);
			
			if($count == 1){
			   $this->conflict_electives = true;
			   $mform->addElement('static', 'notice', '', get_string('enroledinanotherelective1', 'enrol_self'));
					return;
		   }
		   }
	  
		   //1408717068
	   //--------------CHECK FOR CLASH COURSES-----------------
				 $sql3= "SELECT c.id AS courseid, 
			SUBSTRING_INDEX(c.fullname, '(', 1) AS fullname,c.shortname
			FROM 
			mdl_role_assignments ra 
			JOIN mdl_user u ON u.id = ra.userid
			JOIN mdl_role r ON r.id = ra.roleid
			JOIN mdl_context cxt ON cxt.id = ra.contextid
			JOIN mdl_course c ON c.id = cxt.instanceid

			WHERE ra.userid = '".$USER->id."'
			AND ra.contextid = cxt.id
			AND cxt.contextlevel =50
			AND cxt.instanceid = c.id 
			AND  roleid = 5
		   AND c.startdate > ".time();

		  
			$result2=$DB->get_records_sql($sql3);
			$courses = array();
			foreach($result2 as $r)
			{
			   $courses[] = $r->shortname; 
			}
				   $courselist = implode(",",$courses);
				   $courseslist = urlencode($courselist);
				   
				   $courseslist1 = str_replace("+","%20",$courseslist);
				   
			  //     $e1 = str_replace("+","%20",$courseslist);
			 $courseslist2 = str_replace("%2C","%26",$courseslist1);
				   $course_shortname=urlencode($course->shortname);
				   $course_shortname1 = str_replace("+","%20",$course_shortname);

			if($DB->record_exists_sql($sql3)){
			  $conflict  =   file_get_contents("http://lms.nust.edu.pk/course_manager/index.php/schedules/checkClash/$courseslist2/$course_shortname1");

			 $conarray = json_decode($conflict);
		  
			   if($conarray->no_clash == 0) {
				   $this->conflict = true;
				   $mform->addElement('static', 'notice', '', 'You can only enrol in one course');
				   
						return;
			   }
			 
			}
		}
		else {
		 // do nothing
		}
		
      
       
       
       ///////////////By Ayesha Nasim
       
        
        if ($instance->password) {
            // Change the id of self enrolment key input as there can be multiple self enrolment methods.
            $mform->addElement('passwordunmask', 'enrolpassword', get_string('password', 'enrol_self'),
                    array('id' => 'enrolpassword_'.$instance->id));
        } else {
            $mform->addElement('static', 'nokey', '', get_string('nopassword', 'enrol_self'));
        }

        $this->add_action_buttons(false, get_string('enrolme', 'enrol_self'));

        $mform->addElement('hidden', 'id');
        $mform->setType('id', PARAM_INT);
        $mform->setDefault('id', $instance->courseid);

        $mform->addElement('hidden', 'instance');
        $mform->setType('instance', PARAM_INT);
        $mform->setDefault('instance', $instance->id);
    }
    
    public function validation($data, $files) {
        global $DB, $CFG;

        $errors = parent::validation($data, $files);
        $instance = $this->instance;
		
		$course = $DB->get_record('course', array('id'=>$instance->courseid), '*', MUST_EXIST);
		$category = $course->category;
		$semester = $DB->get_record_sql("select parent,name,path from {course_categories} where id=$category");
		$path = explode("/", $semester->path);
		$school = $DB->get_record_sql("select id,name from {course_categories} where id=$path[1]");
		
		if ($school->name == "School of Electrical Engineering and Computer Science (SEECS)" || $school->name == "NUST Business School (NBS)")
		{
			if ($this->conflict_electives)
			{
				$errors['notice'] = get_string('error');
				return $errors;
			}
			 
			if ($this->conflict)
			{
				$errors['notice'] = get_string('error');
				return $errors;
			}

			 
			if ($this->another)
			{
				 
				$errors['notice'] = get_string('error');
				return $errors;
			}
		}
		else
		{
			// do nothing
		}
		
	
		

        if ($this->toomany) {
            
            $errors['notice'] = get_string('error');
            return $errors;
        }

        if ($instance->password) {
            if ($data['enrolpassword'] !== $instance->password) {
                if ($instance->customint1) {
                    $groups = $DB->get_records('groups', array('courseid'=>$instance->courseid), 'id ASC', 'id, enrolmentkey');
                    $found = false;
                    foreach ($groups as $group) {
                        if (empty($group->enrolmentkey)) {
                            continue;
                        }
                        if ($group->enrolmentkey === $data['enrolpassword']) {
                            $found = true;
                            break;
                        }
                    }
                    if (!$found) {
                        // We can not hint because there are probably multiple passwords.
                        $errors['enrolpassword'] = get_string('passwordinvalid', 'enrol_self');
                    }

                } else {
                    $plugin = enrol_get_plugin('self');
                    if ($plugin->get_config('showhint')) {
                        $hint = textlib::substr($instance->password, 0, 1);
                        $errors['enrolpassword'] = get_string('passwordinvalidhint', 'enrol_self', $hint);
                    } else {
                        $errors['enrolpassword'] = get_string('passwordinvalid', 'enrol_self');
                    }
                }
            }
        }

        return $errors;
    }
}
