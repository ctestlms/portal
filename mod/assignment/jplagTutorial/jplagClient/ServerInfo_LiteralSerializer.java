// This class was generated by the JAXRPC SI, do not edit.
// Contents subject to change without notice.
// JAX-RPC Standard Implementation (1.1.3, build R1)
// Generated source version: 1.1.3

package jplagTutorial.jplagClient;

import com.sun.xml.rpc.encoding.*;
import com.sun.xml.rpc.encoding.xsd.XSDConstants;
import com.sun.xml.rpc.encoding.literal.*;
import com.sun.xml.rpc.encoding.literal.DetailFragmentDeserializer;
import com.sun.xml.rpc.encoding.simpletype.*;
import com.sun.xml.rpc.encoding.soap.SOAPConstants;
import com.sun.xml.rpc.encoding.soap.SOAP12Constants;
import com.sun.xml.rpc.streaming.*;
import com.sun.xml.rpc.wsdl.document.schema.SchemaConstants;
import javax.xml.namespace.QName;
import java.util.List;
import java.util.ArrayList;

public class ServerInfo_LiteralSerializer extends LiteralObjectSerializerBase implements Initializable  {
    private static final javax.xml.namespace.QName ns1_userInfo_QNAME = new QName("", "userInfo");
    private static final javax.xml.namespace.QName ns3_UserInfo_TYPE_QNAME = new QName("http://www.ipd.uni-karlsruhe.de/jplag/types", "UserInfo");
    private CombinedSerializer ns3_myUserInfo_LiteralSerializer;
    private static final javax.xml.namespace.QName ns1_languageInfos_QNAME = new QName("", "languageInfos");
    private static final javax.xml.namespace.QName ns3_LanguageInfo_TYPE_QNAME = new QName("http://www.ipd.uni-karlsruhe.de/jplag/types", "LanguageInfo");
    private CombinedSerializer ns3_myLanguageInfo_LiteralSerializer;
    private static final javax.xml.namespace.QName ns1_countryLanguages_QNAME = new QName("", "countryLanguages");
    private static final javax.xml.namespace.QName ns2_string_TYPE_QNAME = SchemaConstants.QNAME_TYPE_STRING;
    private CombinedSerializer ns2_myns2_string__java_lang_String_String_Serializer;
    private static final javax.xml.namespace.QName ns1_submissions_QNAME = new QName("", "submissions");
    private static final javax.xml.namespace.QName ns3_Submission_TYPE_QNAME = new QName("http://www.ipd.uni-karlsruhe.de/jplag/types", "Submission");
    private CombinedSerializer ns3_mySubmission_LiteralSerializer;
    
    public ServerInfo_LiteralSerializer(javax.xml.namespace.QName type, java.lang.String encodingStyle) {
        this(type, encodingStyle, false);
    }
    
    public ServerInfo_LiteralSerializer(javax.xml.namespace.QName type, java.lang.String encodingStyle, boolean encodeType) {
        super(type, true, encodingStyle, encodeType);
    }
    
    public void initialize(InternalTypeMappingRegistry registry) throws Exception {
        ns3_myUserInfo_LiteralSerializer = (CombinedSerializer)registry.getSerializer("", jplagTutorial.jplagClient.UserInfo.class, ns3_UserInfo_TYPE_QNAME);
        ns3_myLanguageInfo_LiteralSerializer = (CombinedSerializer)registry.getSerializer("", jplagTutorial.jplagClient.LanguageInfo.class, ns3_LanguageInfo_TYPE_QNAME);
        ns2_myns2_string__java_lang_String_String_Serializer = (CombinedSerializer)registry.getSerializer("", java.lang.String.class, ns2_string_TYPE_QNAME);
        ns3_mySubmission_LiteralSerializer = (CombinedSerializer)registry.getSerializer("", jplagTutorial.jplagClient.Submission.class, ns3_Submission_TYPE_QNAME);
    }
    
    public java.lang.Object doDeserialize(XMLReader reader,
        SOAPDeserializationContext context) throws java.lang.Exception {
        jplagTutorial.jplagClient.ServerInfo instance = new jplagTutorial.jplagClient.ServerInfo();
        java.lang.Object member=null;
        javax.xml.namespace.QName elementName;
        java.util.List values;
        java.lang.Object value;
        
        reader.nextElementContent();
        elementName = reader.getName();
        if (reader.getState() == XMLReader.START) {
            if (elementName.equals(ns1_userInfo_QNAME)) {
                member = ns3_myUserInfo_LiteralSerializer.deserialize(ns1_userInfo_QNAME, reader, context);
                if (member == null) {
                    throw new DeserializationException("literal.unexpectedNull");
                }
                instance.setUserInfo((jplagTutorial.jplagClient.UserInfo)member);
                reader.nextElementContent();
            } else {
                throw new DeserializationException("literal.unexpectedElementName", new Object[] { ns1_userInfo_QNAME, reader.getName() });
            }
        }
        else {
            throw new DeserializationException("literal.expectedElementName", reader.getName().toString());
        }
        elementName = reader.getName();
        if ((reader.getState() == XMLReader.START) && (elementName.equals(ns1_languageInfos_QNAME))) {
            values = new ArrayList();
            for(;;) {
                elementName = reader.getName();
                if ((reader.getState() == XMLReader.START) && (elementName.equals(ns1_languageInfos_QNAME))) {
                    value = ns3_myLanguageInfo_LiteralSerializer.deserialize(ns1_languageInfos_QNAME, reader, context);
                    if (value == null) {
                        throw new DeserializationException("literal.unexpectedNull");
                    }
                    values.add(value);
                    reader.nextElementContent();
                } else {
                    break;
                }
            }
            member = new jplagTutorial.jplagClient.LanguageInfo[values.size()];
            member = values.toArray((Object[]) member);
            instance.setLanguageInfos((jplagTutorial.jplagClient.LanguageInfo[])member);
        }
        else if(!(reader.getState() == XMLReader.END)) {
            throw new DeserializationException("literal.expectedElementName", reader.getName().toString());
        }
        elementName = reader.getName();
        if ((reader.getState() == XMLReader.START) && (elementName.equals(ns1_countryLanguages_QNAME))) {
            values = new ArrayList();
            for(;;) {
                elementName = reader.getName();
                if ((reader.getState() == XMLReader.START) && (elementName.equals(ns1_countryLanguages_QNAME))) {
                    value = ns2_myns2_string__java_lang_String_String_Serializer.deserialize(ns1_countryLanguages_QNAME, reader, context);
                    if (value == null) {
                        throw new DeserializationException("literal.unexpectedNull");
                    }
                    values.add(value);
                    reader.nextElementContent();
                } else {
                    break;
                }
            }
            member = new java.lang.String[values.size()];
            member = values.toArray((Object[]) member);
            instance.setCountryLanguages((java.lang.String[])member);
        }
        else if(!(reader.getState() == XMLReader.END)) {
            throw new DeserializationException("literal.expectedElementName", reader.getName().toString());
        }
        elementName = reader.getName();
        if ((reader.getState() == XMLReader.START) && (elementName.equals(ns1_submissions_QNAME))) {
            values = new ArrayList();
            for(;;) {
                elementName = reader.getName();
                if ((reader.getState() == XMLReader.START) && (elementName.equals(ns1_submissions_QNAME))) {
                    value = ns3_mySubmission_LiteralSerializer.deserialize(ns1_submissions_QNAME, reader, context);
                    if (value == null) {
                        throw new DeserializationException("literal.unexpectedNull");
                    }
                    values.add(value);
                    reader.nextElementContent();
                } else {
                    break;
                }
            }
            member = new jplagTutorial.jplagClient.Submission[values.size()];
            member = values.toArray((Object[]) member);
            instance.setSubmissions((jplagTutorial.jplagClient.Submission[])member);
        }
        else {
            instance.setSubmissions(new jplagTutorial.jplagClient.Submission[0]);
        }
        
        XMLReaderUtil.verifyReaderState(reader, XMLReader.END);
        return (java.lang.Object)instance;
    }
    
    public void doSerializeAttributes(java.lang.Object obj, XMLWriter writer, SOAPSerializationContext context) throws java.lang.Exception {
        jplagTutorial.jplagClient.ServerInfo instance = (jplagTutorial.jplagClient.ServerInfo)obj;
        
    }
    public void doSerialize(java.lang.Object obj, XMLWriter writer, SOAPSerializationContext context) throws java.lang.Exception {
        jplagTutorial.jplagClient.ServerInfo instance = (jplagTutorial.jplagClient.ServerInfo)obj;
        
        if (instance.getUserInfo() == null) {
            throw new SerializationException("literal.unexpectedNull");
        }
        ns3_myUserInfo_LiteralSerializer.serialize(instance.getUserInfo(), ns1_userInfo_QNAME, null, writer, context);
        if (instance.getLanguageInfos() != null) {
            for (int i = 0; i < instance.getLanguageInfos().length; ++i) {
                ns3_myLanguageInfo_LiteralSerializer.serialize(instance.getLanguageInfos()[i], ns1_languageInfos_QNAME, null, writer, context);
            }
        }
        if (instance.getCountryLanguages() != null) {
            for (int i = 0; i < instance.getCountryLanguages().length; ++i) {
                ns2_myns2_string__java_lang_String_String_Serializer.serialize(instance.getCountryLanguages()[i], ns1_countryLanguages_QNAME, null, writer, context);
            }
        }
        if (instance.getSubmissions() != null) {
            for (int i = 0; i < instance.getSubmissions().length; ++i) {
                ns3_mySubmission_LiteralSerializer.serialize(instance.getSubmissions()[i], ns1_submissions_QNAME, null, writer, context);
            }
        }
    }
}
