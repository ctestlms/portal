<?php
// This file is part of Moodle - http://moodle.org/
//
// Moodle is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// Moodle is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.

/**
 * Manual user enrolment UI.
 *
 * @package    enrol_manual
 * @copyright  2010 Petr Skoda {@link http://skodak.org}
 * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
 */

require('../../config.php');
require_once($CFG->dirroot.'/enrol/manual/locallib.php');
require_once($CFG->dirroot.'/mod/feedback/lib.php');
$enrolid      = required_param('enrolid', PARAM_INT);
$roleid       = optional_param('roleid', -1, PARAM_INT);
$extendperiod = optional_param('extendperiod', 0, PARAM_INT);
$extendbase   = optional_param('extendbase', 3, PARAM_INT);
$role_id      = optional_param('role_id', -1, PARAM_INT);
$sort_        = optional_param('sort_', "", PARAM_INT);
$grp             = optional_param('grp', "", PARAM_ALPHANUM);//get user group
$sgrp            = optional_param('sgrp', "", PARAM_ALPHANUM);//get user sub group.
$instance = $DB->get_record('enrol', array('id'=>$enrolid, 'enrol'=>'manual'), '*', MUST_EXIST);
$course = $DB->get_record('course', array('id'=>$instance->courseid), '*', MUST_EXIST);
$context = context_course::instance($course->id, MUST_EXIST);

require_login($course);
require_capability('enrol/manual:enrol', $context);
require_capability('enrol/manual:manage', $context);
require_capability('enrol/manual:unenrol', $context);

if ($roleid < 0) {
    $roleid = $instance->roleid;
}
if ($role_id < 0) {
       $role_id = $instance->role_id;
}

$roles = get_assignable_roles($context);
$roles = array('0'=>get_string('none')) + $roles;
$roles1 = get_assignable_roles($context);
$roles1 = array('0'=>get_string('all')) + $roles1;
$sortby = array('0'=>get_string('none'),'1'=>"Name",'2'=>"Reg No",'3'=>"UID") ;
if (!isset($roles[$roleid])) {
    // Weird - security always first!
    $roleid = 0;
}

if (!isset($sortby[$sort])) {
       // weird - security always first!
       $sort = 0;
}
if (!$enrol_manual = enrol_get_plugin('manual')) {
    throw new coding_exception('Can not instantiate enrol_manual');
}

$instancename = $enrol_manual->get_instance_name($instance);

$PAGE->set_url('/enrol/manual/manage.php', array('enrolid'=>$instance->id));
$PAGE->set_pagelayout('admin');
$PAGE->set_title($enrol_manual->get_instance_name($instance));
$PAGE->set_heading($course->fullname);
navigation_node::override_active_url(new moodle_url('/enrol/users.php', array('id'=>$course->id)));

// Create the user selector objects.
$options = array('enrolid' => $enrolid, 'accesscontext' => $context);

$potentialuserselector = new enrol_manual_potential_participant('addselect', $options);
$currentuserselector = new enrol_manual_current_participant('removeselect', $options);

// Build the list of options for the enrolment period dropdown.
$unlimitedperiod = get_string('unlimited');
$periodmenu = array();
for ($i=1; $i<=365; $i++) {
    $seconds = $i * 86400;
    $periodmenu[$seconds] = get_string('numdays', '', $i);
}
// Work out the apropriate default setting.
if ($extendperiod) {
    $defaultperiod = $extendperiod;
} else {
    $defaultperiod = $instance->enrolperiod;
}

// Build the list of options for the starting from dropdown.
$timeformat = get_string('strftimedatefullshort');
$today = time();
$today = make_timestamp(date('Y', $today), date('m', $today), date('d', $today), 0, 0, 0);

// Enrolment start.
$basemenu = array();
if ($course->startdate > 0) {
    $basemenu[2] = get_string('coursestart') . ' (' . userdate($course->startdate, $timeformat) . ')';
}
$basemenu[3] = get_string('today') . ' (' . userdate($today, $timeformat) . ')' ;

// Process add and removes.
if (optional_param('add', false, PARAM_BOOL) && confirm_sesskey()) {
    $userstoassign = $potentialuserselector->get_selected_users();
    if (!empty($userstoassign)) {
        foreach($userstoassign as $adduser) {
            switch($extendbase) {
                case 2:
                    $timestart = $course->startdate;
                    break;
                case 3:
                default:
                    $timestart = $today;
                    break;
            }

            if ($extendperiod <= 0) {
                $timeend = 0;
            } else {
                $timeend = $timestart + $extendperiod;
            }
            $enrol_manual->enrol_user($instance, $adduser->id, $roleid, $timestart, $timeend);
            add_to_log($course->id, 'course', 'enrol', '../enrol/users.php?id='.$course->id, $course->id); //there should be userid somewhere!
	    if($roleid==3){
                                $username=$DB->get_record("user", array("id" => $adduser->id)) ;
                                for( $i=0;$i<2;$i++){

                                        $feedback=new stdClass();
                                        $feedback->timemodified = time();
                                        $feedback->id = '';
                                        $feedback->course = $course->id;
                                        if($i==0){
                                                $feedback->name  = "First Student Feedback"."(".$username->firstname." ".$username->lastname.")";
                                                $feedback->intro = "First Student Feedback";
                                                $feedback->timeopen = strtotime("+42 days", $courserecord->timemodified);
                                                $feedback->timeclose = strtotime("+14 days", $feedback->timeopen);
                                        }
                                        if($i==1){
                                                $feedback->name  = "Second Student Feedback"."(".$username->firstname." ".$username->lastname.")";;
                                                $feedback->intro = "Second Student Feedback";
                                                $feedback->timeopen = strtotime("+60 days", $courserecord->timemodified);
                                                $feedback->timeclose = strtotime("+14 days", $feedback->timeopen);
                                        }
                                        $feedback->introformat = 1;
                                        $feedback->anonymous = 1;
                                        $feedback->email_notification = 0;
                                        $feedback->multiple_submit = 0;
                                        $feedback->autonumbering = 1;
                                        $feedback->site_after_submit = "";
                                        $feedback->page_after_submit = "<p>Thankyou for your feedback!!!</p>";
                                        $feedback->page_after_submitformat = 1;
                                        $feedback->publish_stats = 0;
                                        $feedback->completionsubmit = 0;
                                        $feedbackid = $DB->insert_record("feedback", $feedback);
                                        $feedback->id = $feedbackid;
                                        $xmlcontent = file_get_contents($CFG->dirroot.'/feedback.xml', true);
  if(!$xmldata = feedback_load_xml_datap($xmlcontent)) {
                                                print_error('cannotloadxml', 'feedback', 'edit.php?id='.$id);
                                        }

                                        $importerror = feedback_import_loaded_datap($xmldata, $feedback->id);

                                        if (! $module = $DB->get_record("modules", array("name" => "feedback"))) {
                                                echo $OUTPUT->notification("Could not find feedback module!!");
                                                return false;
                                        }
                                        $mod = new stdClass();
                                        $mod->course = $course->id;
                                        $mod->module = $module->id;
                                        $mod->instance = $feedback->id;
                                        $mod->section = 0;
					 include_once("$CFG->dirroot/course/lib.php");
                                        if (! $mod->coursemodule = add_course_module($mod) ) {   // assumes course/lib.php is loaded
                                                echo $OUTPUT->notification("Could not add a new course module to the course '" . $courseid . "'");
                                                return false;
                                        }
                                        if (! $sectionid = add_mod_to_section($mod) ) {   // assumes course/lib.php is loaded
                                                echo $OUTPUT->notification("Could not add the new course module to that section");
                                                return false;
                                        }
                                        $DB->set_field("course_modules", "section", $sectionid, array("id" => $mod->coursemodule));
                                        include_once("$CFG->dirroot/course/lib.php");
                                        rebuild_course_cache($course->id);
                                }
                        }
        }

        $potentialuserselector->invalidate_selected_users();
        $currentuserselector->invalidate_selected_users();

        //TODO: log
    }
}

// Process incoming role unassignments.
if (optional_param('remove', false, PARAM_BOOL) && confirm_sesskey()) {
    $userstounassign = $currentuserselector->get_selected_users();
    if (!empty($userstounassign)) {
        foreach($userstounassign as $removeuser) {
            $enrol_manual->unenrol_user($instance, $removeuser->id);
            add_to_log($course->id, 'course', 'unenrol', '../enrol/users.php?id='.$course->id, $course->id); //there should be userid somewhere!
        }

        $potentialuserselector->invalidate_selected_users();
        $currentuserselector->invalidate_selected_users();

        //TODO: log
    }
}


echo $OUTPUT->header();
echo $OUTPUT->heading($instancename);
//Start of LDAP filter script.
echo "<div style='text-align: center;'>";
$query = "select distinct user_group from {$CFG->prefix}user where user_group NOT IN ('', 'NULL')";
$path = $CFG->wwwroot."/enrol/manual/manage.php?enrolid=".$enrolid;
if($groups = $DB->get_records_sql($query)){
        echo "<select name='grp' id='grp'>";
        echo "<option value=''>.::Select::.</option>";
        foreach ($groups as $group){
                $selected = ($group->user_group == $grp) ? "selected = 'selected'" : "";
                echo "<option value='{$group->user_group}' {$selected} >{$group->user_group}</option>";
        }
        echo "</select>";
        //Get subgroups
        if($grp != ""){
                $query = "select distinct user_subgroup from {$CFG->prefix}user where user_group = '{$grp}'";
                if($sub_groups = $DB->get_records_sql($query)){
                        echo "<select name='sgrp' id='sgrp'>";
                        echo "<option value=''>.::Select::.</option>";
                        foreach ($sub_groups as $sub_group){
                                $selected = ($sub_group->user_subgroup == $sgrp) ? "selected = 'selected'" : "";
                                echo "<option value='{$sub_group->user_subgroup}' {$selected}>{$sub_group->user_subgroup}</option>";
                        }
                        echo "</select>";
                }
        }
}
?>
<script type="text/javascript" src="jquery-1.3.2.js"></script>
<script type="text/javascript">
        $(document).ready(function(){
                $("select#grp").change(function(){
                        if($(this).val() != "")
                                document.location = "<?php echo $path; ?>&grp="+$(this).val();
                });
                $("select#sgrp").change(function(){
                        if($(this).val() != "" && $("select#grp").val() != "")
                                document.location = "<?php echo $path; ?>&grp="+$("select#grp").val()+"&sgrp="+$(this).val();
                });
//Changes by Miss. Hina 14-10-2011
              $("select#sort").change(function(){
                         if($(this).val() != "" ){
                                 if($("select#sgrp").val() != "" && $("select#grp").val() != ""){
                              document.location = "<?php echo $path; ?>&grp="+$("select#grp").val()+"&sgrp="+$("select#sgrp").val()+"&sort_="+$(this).val();
                         }
                         if($("select#sgrp").val() == "" && $("select#grp").val() != ""){
                    document.location = "<?php echo $path; ?>&grp="+$("select#grp").val()+"&sort_="+$(this).val();
                }
                if($("select#sgrp").val() == "" && $("select#grp").val() == ""){            
                    document.location = "<?php echo $path; ?>&sort_="+$(this).val();
                }
                
            }
        });
        });

</script>
</div>

<form id="assignform" method="post" action="<?php echo $PAGE->url ?>"><div>
  <input type="hidden" name="sesskey" value="<?php echo sesskey() ?>" />

  <table summary="" class="roleassigntable generaltable generalbox boxaligncenter" cellspacing="0">
    <tr>
	<td colspan="2">
                        <h2>Current role:</h2>
                        <?php echo html_writer::select($roles1, 'role_id', $role_id, false,array('onchange' => 'this.form.submit()')); ?>
                </td>
	<td>            <b>Sort and Display:</b>             <select
                                       name="sort" id="sort">                
                                               <option value="0"
                                               <?php if($sort_ == 0) echo "selected = 'selected'"; ?>>All</option>                                                                  
                                               <option value="1"
                                               <?php if($sort_ == 1) echo "selected = 'selected'"; ?>>Name</option>
                                                                              
                                               <option value="2"
                                               <?php if($sort_ == 2) echo "selected = 'selected'"; ?>>UID</option>
                                                              
                                               <option value="3"
                                               <?php if($sort_ == 3) echo "selected = 'selected'"; ?>>Email</option>
                                                          
                               </select>             </td>
                       </tr>
                       </td>
                       <td></td>

</tr>
    <tr>
      <td id="existingcell">
          <p><label for="removeselect"><?php print_string('enrolledusers', 'enrol'); ?></label></p>
          <?php $currentuserselector->display() ?>
      </td>
      <td id="buttonscell">
          <div id="addcontrols">
              <input name="add" id="add" type="submit" value="<?php echo $OUTPUT->larrow().'&nbsp;'.get_string('add'); ?>" title="<?php print_string('add'); ?>" /><br />

              <div class="enroloptions">

              <p><label for="menuroleid"><?php print_string('assignrole', 'enrol_manual') ?></label><br />
              <?php echo html_writer::select($roles, 'roleid', $roleid, false); ?></p>

              <p><label for="menuextendperiod"><?php print_string('enrolperiod', 'enrol') ?></label><br />
              <?php echo html_writer::select($periodmenu, 'extendperiod', $defaultperiod, $unlimitedperiod); ?></p>

              <p><label for="menuextendbase"><?php print_string('startingfrom') ?></label><br />
              <?php echo html_writer::select($basemenu, 'extendbase', $extendbase, false); ?></p>

              </div>
          </div>

          <div id="removecontrols">
              <input name="remove" id="remove" type="submit" value="<?php echo get_string('remove').'&nbsp;'.$OUTPUT->rarrow(); ?>" title="<?php print_string('remove'); ?>" />
          </div>
      </td>
      <td id="potentialcell">
          <p><label for="addselect"><?php print_string('enrolcandidates', 'enrol'); ?></label></p>
          <?php $potentialuserselector->display() ?>
      </td>
    </tr>
  </table>
</div></form>
<?php


echo $OUTPUT->footer();
